{
  "build_dir": "Books",
  "code_dir": "SourceCode/",
  "code_lang": {
    "Java": {
      "ext": [
        "java"
      ],
      "label": "Java",
      "lang": "java"
    },
    "Processing": {
      "ext": [
        "pde"
      ],
      "label": "Processing",
      "lang": "java"
    },
    "Java_Generic": {
      "ext": [
        "java"
      ],
      "label": "Java (Generic)",
      "lang": "java"
    },
    "C++": {
      "ext": [
        "cpp",
        "h"
      ],
      "label": "C++",
      "lang": "C++"
    }
  },
  "lang": "en",
  "build_JSAV": false,
  "allow_anonymous_credit": true,
  "suppress_todo": false,
  "assumes": "BST",
  "dispModComp": true,
  "glob_exer_options": {
    "JXOP-debug": "true"
  },
  "chapters": {
    "Spatial Data Structures": {
      "Development/Spatial": {
        "long_name": "Spatial Data Structures",
        "sections": {}
      },
      "Development/KDtree": {
        "long_name": "k-d Trees",
        "sections": {
          "KD Trees": {
            "kd-treeAV": {
              "long_name": "KD tree Visualization",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            },
            "kd-interact": {
              "long_name": "KD tree Interaction",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          }
        }
      },
      "Development/Bintree": {
        "long_name": "Bintrees",
        "sections": {
          "The Bintree": {
            "bintreeCONBTEX": {},
            "bintreeAV": {
              "long_name": "Bintree Visualization",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          }
        }
      },
      "Development/BintreeNew": {
        "long_name": "Bintrees",
        "sections": {
          "The Bintree": {
            "bintreeCONBTEX": {},
            "bintreeAV": {
              "long_name": "Bintree Visualization",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          }
        }
      }
    },
    "Searching": {
      "Development/SearchIntro": {
        "long_name": "Search Chapter Introduction",
        "sections": {}
      },
      "Development/UnsortedSearch": {
        "long_name": "Analyzing Search in Unsorted Arrays",
        "sections": {}
      },
      "Development/SortedSearch": {
        "long_name": "Search in sorted Arrays",
        "sections": {}
      },
      "Development/SelfOrg": {
        "long_name": "Self Organizing Lists",
        "sections": {
          "Introduction": {},
          "Frequency Count": {
            "SelforgCON1": {
              "long_name": "Self-organizing List Slideshow: Frequency Count",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "SelfOrgCounterPro": {
              "long_name": "Self-organizing List Counter Proficiency Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 0.90,
              "exer_options": {
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "fix"
              }
            }
          },
          "Move to Front": {
            "SelforgCON2": {
              "long_name": "Self-organizing List Slideshow: Move-to-front",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "SelfOrgMove-to-FrontPro": {
              "long_name": "Self-organizing List Move-to-front Proficiency Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 0.90,
              "exer_options": {
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "fix"
              }
            }
          },
          "Transpose": {
            "SelforgCON3": {
              "long_name": "Self-organizing List Slideshow: Transpose",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "SelfOrgTransposePro": {
              "long_name": "Self-organizing List Transpose Proficiency Exercise",
              "required": true,
              "points": 2.0,
              "threshold": 0.90,
              "exer_options": {
                "JXOP-feedback": "continuous",
                "JXOP-fixmode": "fix"
              }
            }
          },
          "An Example": {}
        }
      },
      "Development/SetSearch": {
        "long_name": "Bit Vectors for Representing Sets",
        "sections": {}
      },
      "Development/PerfectHash": {
        "long_name": "Perfect Hashing",
        "sections": {
          "Perfect Hashing": {
            "perfectHashAV": {
              "long_name": "Perfect Hashing Visualization",
              "required": false,
              "showhide": "none",
              "points": 0,
              "threshold": 1.0
            }
          }
        }
      }
    },
    "Balanced Trees": {
      "Development/BalancedTree": {
        "long_name": "Balanced Trees",
        "sections": {}
      },
      "Development/AVL": {
        "long_name": "AVL Tree",
        "sections": {}
      },
      "Development/Splay": {
        "long_name": "Splay Tree",
        "sections": {}
      },
      "Development/RedBlack": {
        "long_name": "The Red-Black Tree",
        "sections": {
          "Exercise 1": {
            "redBlackTreeColoring": {
              "long_name": "Red-Black Tree Coloring Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          },
          "Exercise 2": {
            "redBlackTreePRO": {
              "long_name": "Red-Black Tree Proficiency Exercise",
              "required": true,
              "points": 1.0,
              "threshold": 0.90
            }
          }
        }
      }
    },
    "Advanced Analysis": {
      "Development/AdvSumm": {
        "long_name": "Summation Techniques",
        "sections": {}
      },
      "Development/Recurrence": {
        "long_name": "Solving Recurrence Relations",
        "sections": {
          "Solving Recurrence Relations": {
            "DivideAndConquerRecurrencesCON": {
              "long_name": "Divide-and-Conquer Expansion Slideshow",
              "required": true,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "Development/AmortAnal": {
        "long_name": "Amortized Analysis",
        "sections": {}
      }
    },
    "Algorithms": {
      "Development/DynamicProgramming": {
        "long_name": "Dynamic Programming",
        "sections": {}
      },
      "Graph/Floyd": {
        "long_name": "All-Pairs Shortest Paths",
        "sections": {}
      },
      "Development/Knapsack": {
        "sections": {
          "0/1 Knapsack Problem": {
            "sackCallTree": {
              "long_name": "Knapsack Call Tree",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "sackTreePluck": {
              "long_name": "Knapsack Call Tree Pluck",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "sackTraceBack": {
              "long_name": "Knapsack Tree Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          },
          "Exercise 1": {
            "knapsackSelect": {
              "long_name": "Knapsack Select",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Exercise 2": {
            "knapsackFillRow": {
              "long_name": "Knapsack Fill Row",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Exercise 3": {
            "knapsackSolution": {
              "long_name": "Knapsack Solution",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Exercise 4": {
            "sackProficiency": {
              "long_name": "Knapsack Proficiency",
              "required": true,
              "points": 1,
              "threshold": 0.9
            }
          }
        }
      },
      "Development/EditDistance": {
        "sections": {
          "Edit Distance": {
            "editRCT": {
              "long_name": "Edit RCT",
              "required": true,
              "points": 1,
              "threshold": 0.9
            },
            "editPrune": {
              "long_name": "Edit Prune",
              "required": true,
              "points": 1,
              "threshold": 0.9
            },
            "editOptimal": {
              "long_name": "Edit Optimal",
              "required": true,
              "points": 1,
              "threshold": 0.9
            }
          },
          "Exercise 1": {
            "edit-KA1": {
              "long_name": "Edit KA1",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          },
          "Exercise 2": {
            "edit-KA2": {
              "long_name": "Edit KA2",
              "required": true,
              "points": 1,
              "threshold": 5
            }
          }
        }
      },
      "Development/StringSearchKMP": {
        "long_name": "KMP String Search Algorithm",
        "sections": {}
      },
      "Development/StringSearchBoyerMoore": {
        "long_name": "Boyer-Moore String Search Algorithm",
        "sections": {}
      },
      "Development/StringSearchRabinKarp": {
        "long_name": "Rabin-Karp String Search Algorithm",
        "sections": {}
      },
      "Development/RandomIntro": {
        "long_name": "Introduction to Randomized Algorithms",
        "sections": {}
      },
      "Development/SkipList": {
        "long_name": "Skip Lists",
        "sections": {}
      },
      "Development/RandomNums": {
        "long_name": "Random Numbers",
        "sections": {}
      }
    },
    "Lower Bounds": {
      "Development/BoundLower": {
        "long_name": "Introduction to Lower Bounds",
        "sections": {}
      },
      "Development/BoundSearch": {
        "long_name": "Lower Bounds on Search",
        "sections": {}
      },
      "Development/BoundMax": {
        "long_name": "Lower Bounds on Search",
        "sections": {}
      },
      "Development/BoundAdversary": {
        "long_name": "Adversary Lower Bounds",
        "sections": {}
      },
      "Development/BoundState": {
        "long_name": "State Space Lower Bounds",
        "sections": {}
      },
      "Development/BoundiBest": {
        "long_name": "Finding ith Best Element",
        "sections": {}
      },
      "Development/SortingOptimal": {
        "long_name": "Optimal Sorting",
        "sections": {}
      }
    },
    "Miscellaneous": {
      "Development/GenTreeImplement": {
        "long_name": "General Tree Implementations",
        "sections": {}
      }
    },
    "Limits to Computing": {
      "NP/LimComp": {
        "long_name": "Chapter Intro: Limits to Computing",
        "sections": {}
      },
      "NP/Reduction": {
        "long_name": "Reductions",
        "sections": {
          "Reductions": {
            "pairToSortReduction": {
              "long_name": "Reduction of Pairing to Sorting",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            },
            "sortToPairReduction": {
              "long_name": "Reduction of Sorting to Pairing",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            },
            "matrixMulReduction": {
              "long_name": "Matrix Multiplication",
              "required": false,
              "points": 0,
              "showhide": "none",
              "threshold": 1.0
            }
          }
        }
      },
      "NP/NPComplete": {
        "long_name":"NP Completeness",
        "sections": {}
      },
      "NP/circuitSAT": {
        "long_name": "The Circuit Satisfiability problem",
        "sections": {
          "Circuit Satisfiability": {
            "circuitSATCON": {
              "long_name": "Circuit Satisfiability",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/SAT": {
        "long_name": "The Formula Satisfiability problem",
        "sections": {
          "Formula Satisfiability": {
            "SATCON": {
              "long_name": "Formula Satisfiability",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/threeSAT": {
        "long_name": "The 3-CNF Satisfiability problem",
        "sections": {
          "3-CNF Satisfiability": {
            "threeSATCON": {
              "long_name": "3-Satisfiability",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "threeSAT_KA":{
              "long_name": "Practice Exercise for 3-SAT",
              "required": true,
              "points": 1,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/clique": {
        "long_name": "The Clique problem",
        "sections": {
          "The Clique Problem": {
            "cliqueCON": {
              "long_name": "Clique",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "clique_KA":{
              "long_name": "Practice Exercise for Clique",
              "required": true,
              "points": 1,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/independentSet": {
        "long_name": "The Independent Set problem",
        "sections": {
          "Independent Set": {
            "independentSetCON": {
              "long_name": "Independent Set",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "independentSet_KA":{
              "long_name": "Practice Exercise for Independent Set",
              "required": true,
              "points": 1,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/vertexCover": {
        "long_name": "The Independent Set problem",
        "sections": {
          "Vertex Cover": {
            "vertexCoverCON": {
              "long_name": "Vertex Cover",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "vertexCover_KA":{
              "long_name": "Practice Exercise for Vertex Cover",
              "required": true,
              "points": 1,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/hamiltonianCycle": {
        "long_name": "The Hamiltonian Cycle problem",
        "sections": {
          "Hamiltonian Cycle": {
            "hamiltonianCycleCON": {
              "long_name": "Hamiltonian Cycle",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "hamiltonianCycle_KA":{
              "long_name": "Practice Exercise for Hamiltonian Cycle",
              "required": true,
              "points": 1,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/TSP": {
        "long_name": "The Traveling Salesman problem",
        "sections": {
          "Traveling Salesman": {
            "TSPCON": {
              "long_name": "Traveling Salesman",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            },
            "TSP_KA":{
              "long_name": "Practice Exercise for Traveling Salesman Problem",
              "required": true,
              "points": 1,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/provingNPC": {
        "long_name": "NP-completeness Proofs",
        "sections": {
          "NP-Completeness Proofs": {
            "NPCProofDiagramCON": {}
          }
        }
      },
      "NP/circuitSAT_to_SAT": {
        "long_name": "Reduction of circuit SAT to SAT.",
        "sections": {
          "Reduction of Circuit SAT to SAT": {
            "circuitSATtoSATCON": {
              "long_name": "Circuit SAT to SAT",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/SAT_to_threeSAT": {
        "long_name": "Reduction of SAT to 3-SAT.",
        "sections": {
          "Reduction of SAT to 3-SAT": {
            "circuitSATtoSATCON": {
              "long_name": "SAT to 3-SAT Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/threeSAT_to_clique": {
        "long_name": "Reduction of 3-SAT to Clique problem.",
        "sections": {
          "Reduction of 3-SAT to Clique": {
            "circuitSATtoCliqueCON": {
              "long_name": "3-SAT to Clique Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/clique_to_independentSet": {
        "long_name": "Reduction of Clique to Independent Set",
        "sections": {
          "Clique to Independent Set": {
            "cliqueToISCON": {
              "long_name": "Clique to IS Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/independentSet_to_vertexCover": {
        "long_name": "Reduction of Independent Set to Vertex Cover",
        "sections": {
          "Independent Set to Vertex Cover": {
            "IStoVCCON": {
              "long_name": "IS to VC Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/threeSAT_to_hamiltonianCycle": {
        "long_name": "Reduction of 3-SAT to Hamiltonian Cycle Problem.",
        "sections": {
          "3-SAT to Hamiltonian Cycle": {
            "threeSATtoHCCON": {
              "long_name": "3-SAT to HC Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/hamiltonianCycle_to_TSP": {
        "long_name": "Reduction of Hamiltonian Cycle Problem to TSP.",
        "sections": {
          "Hamiltonian Cycle to Traveling Salesman": {
            "HCtoTSPCON": {
              "long_name": "HC to TSP Reduction",
              "required": false,
              "points": 0.0,
              "threshold": 1.0
            }
          }
        }
      },
      "NP/NPCoping": {
        "long_name": "Coping with NP-complete problems",
        "sections": {}
      },
      "Development/Impossible": {
        "long_name": "Unsolveable Problems",
        "sections": {}
      }
    },
    "Appendix": {
      "Glossary": {
        "long_name": "Glossary",
        "sections": {}
      },
      "Bibliography": {
        "long_name": "Bibliography",
        "sections": {}
      }
    }
  }
}
